import { MailService } from '../common/services/mailer/email.service';
import { updateUserDTO } from './dto/updateUser.dto';
import { UpdateResult, DeleteResult } from 'typeorm';
import { createUserDTO } from './dto/createUser.dto';
import { UsersEntity } from './users.entity';
import { ConfigService } from '@nestjs/config';
import { PaginationPrimeNgResult } from '@sanfrancisco/common/DTO/pagination-prime-Ng-result.dto';
import { statusUserDTO } from './dto/statusUser.dto';
import { SucursalEntity } from '../sucursales/sucursal.entity';
import { PaginationOptions } from '@sanfrancisco/common/DTO/paginationPrimeNg.dto';
import { UserSucursalesEntity } from './userSucursales.entity';
import { ProfileTypes, PerfilTipoEmpleado } from './profiles.enum';
import { LoginIdentityDTO } from '@sanfrancisco/auth/dto/loginIdentity.dto';
export declare class UsersService {
    private readonly configService;
    private readonly mailSenderService;
    constructor(configService: ConfigService, mailSenderService: MailService);
    private logger;
    getMatrizAdmins(): Promise<UsersEntity[]>;
    getAdminsSuc(sucursalId: number): Promise<UsersEntity[]>;
    paginate(options: PaginationOptions): Promise<PaginationPrimeNgResult>;
    getById(id: number): Promise<UsersEntity>;
    getByEmail(email: string, profile?: ProfileTypes): Promise<UsersEntity>;
    statusById(id: number, status: statusUserDTO): Promise<UpdateResult>;
    create(userdto: createUserDTO, sendThisEmail?: boolean): Promise<UsersEntity>;
    update(id: number, data: updateUserDTO): Promise<UpdateResult>;
    changePassword(user: LoginIdentityDTO, password: string, newPassword: string): Promise<UpdateResult>;
    delete(id: number): Promise<DeleteResult>;
    changePasswordByToken(email: string, theToken: string, newPassword: string): Promise<UpdateResult>;
    startPasswordReset(email: string): Promise<void>;
    setEmailToken(id: number, token: string): Promise<boolean>;
    startEmailValidate(id: number): Promise<boolean>;
    emailValidate(id: number, token: string): Promise<boolean>;
    validEmail(id: number): Promise<boolean>;
    updateUserPicture(id: number, picUrl: string): Promise<UpdateResult>;
    getProfiles(): Promise<{
        ALMACEN_GENERAL: ProfileTypes;
        TESORERO_SUCURSALES_CENTRALES: ProfileTypes;
        TESORERO_SUCURSALES_FORANEAS: ProfileTypes;
        COMPRAS: ProfileTypes;
        DIRECTIVOS: ProfileTypes;
        GERENTE_SUCURSALES: ProfileTypes;
        SUCURSAL: ProfileTypes;
        EMPLEADO: ProfileTypes;
    }>;
    getPerfilTipoEmpleados(): Promise<{
        GENERAL: PerfilTipoEmpleado;
        CAPTADOR: PerfilTipoEmpleado;
        MAQUILADOR: PerfilTipoEmpleado;
        VENDEDOR: PerfilTipoEmpleado;
    }>;
    getSucursales(uId: any): Promise<Partial<SucursalEntity>[]>;
    asignarUsuarioSucursal(uId: any, sId: any): Promise<UserSucursalesEntity>;
    desasignarUsuarioSucursal(uId: any, sId: any): Promise<DeleteResult>;
    grabarRule(rule: string, userId: number): Promise<'ok' | 'duplicated'>;
    finalizarGrabado(userId: number): Promise<UpdateResult>;
    activarGrabado(userId: number, estatus?: boolean): Promise<UpdateResult>;
    importarEmpleados(xlsFile: string, sendEmails?: boolean): Promise<any>;
}
