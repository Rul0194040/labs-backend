import { LoginIdentityDTO } from '@sanfrancisco/auth/dto/loginIdentity.dto';
import { PaginationPrimeNgResult } from '@sanfrancisco/common/DTO/pagination-prime-Ng-result.dto';
import { UsersEntity } from '@sanfrancisco/users/users.entity';
import { UpdateResult, DeleteResult } from 'typeorm';
import { CajaEntity } from './cajas.entity';
import { CreateCajaDTO } from './DTO/create-caja.dto';
import { UpdateCajaDTO } from './DTO/update-caja.dto';
import { PaginationOptions } from '@sanfrancisco/common/DTO/paginationPrimeNg.dto';
import { MovimientoCajaEntity } from './movimientos-caja.entity';
import { MovimientosCajaDTO } from './DTO/movimientos-caja.dto';
import { TotalMovimientosCajaDTO } from './DTO/total-movimientos-caja.dto';
import { CerrarCajaDTO } from './DTO/cerrar-caja.dto';
import { CambiarStatusMovimientoDTO } from './DTO/cambiarStatusMovimiento.dto';
import { EstatusMovimientoCancelacionE } from './estatusMovimiento.enum';
import { RecibirDTO } from './DTO/recibirDatos.dto';
import { CajasCerradasSucursalDTO } from './DTO/cajasCerradasSucursal.dto';
export declare class CajasService {
    private readonly notFoundMessage;
    create(caja: CreateCajaDTO, usuario: UsersEntity): Promise<CajaEntity>;
    setContabilizada(cajaId: number): Promise<UpdateResult>;
    setEntregada(cajaId: number, datosCaja: RecibirDTO): Promise<UpdateResult>;
    getById(id: number): Promise<CajaEntity>;
    update(id: number, caja: UpdateCajaDTO): Promise<UpdateResult>;
    delete(id: number): Promise<DeleteResult>;
    paginate(options: PaginationOptions): Promise<PaginationPrimeNgResult>;
    cajasUsuario(user: LoginIdentityDTO, options: PaginationOptions): Promise<PaginationPrimeNgResult>;
    ventasCaja(user: LoginIdentityDTO, options: PaginationOptions): Promise<PaginationPrimeNgResult>;
    movimientosCaja(id: number, movimiento: string, options: PaginationOptions): Promise<PaginationPrimeNgResult>;
    movimientosCancelados(id: number): Promise<MovimientoCajaEntity[]>;
    movimientosRetiros(id: number): Promise<MovimientoCajaEntity[]>;
    movimientosDepositos(id: number): Promise<MovimientoCajaEntity[]>;
    consultarCajaUsuario(user: LoginIdentityDTO): Promise<CajaEntity | null>;
    crearDeposito(user: UsersEntity, depositoData: MovimientosCajaDTO, apertura: boolean): Promise<CajaEntity>;
    crearRetiro(user: UsersEntity, retiroData: MovimientosCajaDTO): Promise<CajaEntity>;
    getTotalMovimientosByCaja(user: UsersEntity): Promise<TotalMovimientosCajaDTO>;
    getTotalMovimientosByCajaCerrada(cajaId: any): Promise<TotalMovimientosCajaDTO>;
    getCajasCerradasPorSucursal(sucursalId: number, user: LoginIdentityDTO): Promise<CajasCerradasSucursalDTO[]>;
    getCortePorCaja(cajaId: number): Promise<CajasCerradasSucursalDTO>;
    contabilizarCajas(sucursalId: number, user: LoginIdentityDTO): Promise<UpdateResult>;
    solicitarCancelacion(idMovimiento: number, idCaja: number, cambiarStatus: CambiarStatusMovimientoDTO): Promise<MovimientoCajaEntity>;
    cancelarMovimiento(idMovimiento: number, estatusMovimiento: EstatusMovimientoCancelacionE): Promise<CajaEntity>;
    cerrarCaja(user: LoginIdentityDTO, cerrarCaja: CerrarCajaDTO): Promise<UpdateResult>;
    getInfoForDoc(id: number): Promise<any | null>;
}
