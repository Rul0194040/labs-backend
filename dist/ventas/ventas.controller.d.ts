import { updateSeguimientoVenta } from './../pagos/dtos/updateSegumientoVenta.dto';
import { TransaccionDTO } from './DTOs/transaccion.dto';
import { PagoEntity } from '@sanfrancisco/pagos/pagos.entity';
import { InformeFolioDTO } from './DTOs/informe-folio.dto';
import { AsignDetalleDTO } from './DTOs/create-detalle.dto';
import { LoginIdentityDTO } from './../auth/dto/loginIdentity.dto';
import { DetalleVentasInsumosEntity } from './ventasDetalleInsumos.entity';
import { DetalleVentasEntity } from './ventasDetalle.entity';
import { PaginationPrimeNgResult } from '@sanfrancisco/common/DTO/pagination-prime-Ng-result.dto';
import { PaginationOptions } from '@sanfrancisco/common/DTO/paginationPrimeNg.dto';
import { UpdateResult, DeleteResult } from 'typeorm';
import { ClienteVentaDTO } from './DTOs/cliente-venta.dto';
import { PacienteVentaDTO } from './DTOs/paciente-venta.dto';
import { CreateVentaDTO } from './DTOs/create-venta.dto';
import { InsumosServicioDTO } from './DTOs/insumos-servicio.dto';
import { EstadosVentas } from './estadosVentas.enum';
import { VentaEntity } from './ventas.entity';
import { VentasService } from './ventas.service';
import { UpdateCreditoDTO } from './DTOs/update-credito.dto';
import { VentaServiciosDTO } from './DTOs/venta-servicios.dto';
import { HeimdalService } from '../common/heimdal/heimdal.service';
import { TicketVentaDTO } from './DTOs/ticket-venta.dto';
import { VentaDetalleInsumosDTO } from './DTOs/venta-detalle-insumos.dto';
import { PacienteEntity } from '../pacientes/pacientes.entity';
import { ClienteEntity } from '../clientes/clientes.entity';
import { AutorizarDescuentoDTO, AutorizarDescuentoResponseDTO } from './DTOs/autorizar-descuento.dto';
import { MailService } from '@sanfrancisco/common/services/mailer/email.service';
import { SendEmailResultadosDTO } from './DTOs/send-email-resultados.dto';
import { MaquiladorVentaDTO } from './DTOs/maquilador-venta.dto';
import { CaptadorVentaDTO } from './DTOs/captador-venta.dto';
import { UsersEntity } from '@sanfrancisco/users/users.entity';
import { VendedorVentaDTO } from './DTOs/vendedor-venta.dto';
import { WhatsappService } from '@sanfrancisco/whatsapp/whatsapp.service';
import { ConfigService } from '@nestjs/config';
export declare class VentasController {
    private readonly ventasService;
    private readonly heimalService;
    private readonly mailSenderService;
    private readonly whatsapService;
    private readonly configService;
    private logger;
    constructor(ventasService: VentasService, heimalService: HeimdalService, mailSenderService: MailService, whatsapService: WhatsappService, configService: ConfigService);
    paginate(cajaId: number, options: PaginationOptions): Promise<PaginationPrimeNgResult>;
    paginateSegumiento(options: PaginationOptions, user: LoginIdentityDTO): Promise<PaginationPrimeNgResult>;
    paginateVentasClientes(options: PaginationOptions): Promise<PaginationPrimeNgResult>;
    getDetalleVentaPorId(detalleVentaId: number): Promise<DetalleVentasEntity>;
    insumosADetalle(ventaDetalleId: number, detalles: InsumosServicioDTO[], user: LoginIdentityDTO): Promise<DetalleVentasInsumosEntity[]>;
    insumosFueraDetalle(VentasInsumoId: number): Promise<UpdateResult>;
    getInsumoDetallePorVenta(ventaId: number): Promise<VentaDetalleInsumosDTO[]>;
    getInsumosPorDetalleVenta(detalleVentaId: number): Promise<DetalleVentasInsumosEntity[]>;
    updateEstadoDetalleVenta(detalleVentaId: number): Promise<boolean>;
    updateEstadosDetalleVenta(ventaId: number, estado: boolean): Promise<VentaDetalleInsumosDTO[]>;
    interaccionWhatsapp(ventaId: number): Promise<any>;
    encuestaWhatsapp(ventaId: number): Promise<any>;
    CreateDetalle(asignacion: AsignDetalleDTO): Promise<DetalleVentasEntity>;
    removeCliente(id: number): Promise<UpdateResult>;
    finalizarVenta(ventaId: number): Promise<UpdateResult>;
    Transaccion(id: number, montos: TransaccionDTO): Promise<UpdateResult>;
    removeDetalle(id: number): Promise<DeleteResult>;
    clienteAVenta(asignacion: ClienteVentaDTO): Promise<ClienteEntity>;
    maquiladorAVenta(asignacion: MaquiladorVentaDTO): Promise<Partial<UsersEntity>>;
    captadorAVenta(asignacion: CaptadorVentaDTO): Promise<Partial<UsersEntity>>;
    vendedorAVenta(asignacion: VendedorVentaDTO): Promise<Partial<UsersEntity>>;
    PacienteAVenta(asignacion: PacienteVentaDTO): Promise<PacienteEntity>;
    create(venta: CreateVentaDTO, user: LoginIdentityDTO): Promise<VentaEntity>;
    getById(id: number): Promise<VentaEntity>;
    getVentasCreditoCliente(clienteId: number, options: PaginationOptions): Promise<PaginationPrimeNgResult>;
    getpagosByVentas(ventaId: number): Promise<PagoEntity[]>;
    solicitarCancelacion(ventaId: number, motivoCancelacion: string): Promise<UpdateResult>;
    getDetalleVentaById(id: number): Promise<VentaServiciosDTO>;
    getventaByFolio(folioId: string): Promise<InformeFolioDTO>;
    updateStatus(id: number, status: EstadosVentas): Promise<UpdateResult>;
    updateVenta(id: number, body: VentaEntity): Promise<VentaEntity>;
    delete(id: number): Promise<DeleteResult>;
    updateCredito(id: number, credito: UpdateCreditoDTO): Promise<UpdateResult>;
    ticket(id: number): Promise<TicketVentaDTO>;
    autorizarDescuento(ventaId: number, data: AutorizarDescuentoDTO): Promise<AutorizarDescuentoResponseDTO>;
    paginateVentasPaciente(options: PaginationOptions): Promise<PaginationPrimeNgResult>;
    cotizacion(id: number): Promise<TicketVentaDTO>;
    paginateMovil(options: PaginationOptions): Promise<PaginationPrimeNgResult>;
    updateSeguimientoVenta(ventaId: number, pago: updateSeguimientoVenta): Promise<UpdateResult>;
    uploadAvatar(file: any): Promise<any>;
    getPdf(uuid: string, res: any): Promise<void>;
    emailPdfPaciente(uuid: string, data: SendEmailResultadosDTO): Promise<void>;
    getMaquiladoresVendedoresCaptadores(): Promise<{
        maquiladores: Partial<UsersEntity>[];
        vendedores: Partial<UsersEntity>[];
        captadores: Partial<UsersEntity>[];
    }>;
}
