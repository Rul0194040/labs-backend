import { updateSeguimientoVenta } from './../pagos/dtos/updateSegumientoVenta.dto';
import { InformeFolioDTO } from './DTOs/informe-folio.dto';
import { PagoEntity } from './../pagos/pagos.entity';
import { AsignDetalleDTO } from './DTOs/create-detalle.dto';
import { LoginIdentityDTO } from './../auth/dto/loginIdentity.dto';
import { DetalleVentasInsumosEntity } from './ventasDetalleInsumos.entity';
import { PacienteEntity } from './../pacientes/pacientes.entity';
import { ClienteVentaDTO } from './DTOs/cliente-venta.dto';
import { PacienteVentaDTO } from './DTOs/paciente-venta.dto';
import { CreateVentaDTO } from './DTOs/create-venta.dto';
import { VentaEntity } from '@sanfrancisco/ventas/ventas.entity';
import { PaginationPrimeNgResult } from '@sanfrancisco/common/DTO/pagination-prime-Ng-result.dto';
import { PaginationOptions } from '@sanfrancisco/common/DTO/paginationPrimeNg.dto';
import { UpdateResult, DeleteResult } from 'typeorm';
import { EstadosVentas } from './estadosVentas.enum';
import { InsumosServicioDTO } from './DTOs/insumos-servicio.dto';
import { DetalleVentasEntity } from './ventasDetalle.entity';
import { UsersEntity } from '@sanfrancisco/users/users.entity';
import { UpdateCreditoDTO } from './DTOs/update-credito.dto';
import { VentaServiciosDTO } from './DTOs/venta-servicios.dto';
import { TicketVentaDTO } from './DTOs/ticket-venta.dto';
import { TransaccionDTO } from './DTOs/transaccion.dto';
import { VentaDetalleInsumosDTO } from './DTOs/venta-detalle-insumos.dto';
import { EstadosCancelacionVenta } from './estadosCancelacion.enum';
import { ClienteEntity } from '../clientes/clientes.entity';
import { EventEmitter2 } from '@nestjs/event-emitter';
import { AutorizarDescuentoDTO, AutorizarDescuentoResponseDTO } from './DTOs/autorizar-descuento.dto';
import { PxlabService } from '@sanfrancisco/pxlab/pxlab.service';
import { MaquiladorVentaDTO } from './DTOs/maquilador-venta.dto';
import { VendedorVentaDTO } from './DTOs/vendedor-venta.dto';
import { CaptadorVentaDTO } from './DTOs/captador-venta.dto';
import { MyLogger } from '@sanfrancisco/logger';
export declare class VentasService {
    private readonly pxService;
    private readonly eventEmitter;
    constructor(pxService: PxlabService, eventEmitter: EventEmitter2);
    private readonly notFoundMessage;
    logger: MyLogger;
    create(venta: CreateVentaDTO, user: LoginIdentityDTO): Promise<VentaEntity>;
    updateSeguimientoVenta(ventaId: number, venta: updateSeguimientoVenta): Promise<UpdateResult>;
    ClienteAVenta(detalles: ClienteVentaDTO): Promise<ClienteEntity>;
    MaquiladorAVenta(detalles: MaquiladorVentaDTO): Promise<Partial<UsersEntity>>;
    VendedorAVenta(detalles: VendedorVentaDTO): Promise<Partial<UsersEntity>>;
    CaptadorAVenta(detalles: CaptadorVentaDTO): Promise<Partial<UsersEntity>>;
    PacienteAVenta(detalles: PacienteVentaDTO): Promise<PacienteEntity>;
    removeCliente(id: number): Promise<UpdateResult>;
    CreateDetalle(detalles: AsignDetalleDTO): Promise<DetalleVentasEntity>;
    removeDetalle(id: number): Promise<DeleteResult>;
    updateTransaccion(id: number, montos: TransaccionDTO): Promise<UpdateResult>;
    getDetalleVentaPorId(detalleVentaId: number): Promise<DetalleVentasEntity>;
    insumosADetalle(detalles: InsumosServicioDTO[], detalleVentaId: number, user: LoginIdentityDTO): Promise<DetalleVentasInsumosEntity[]>;
    insumosADetalleRetiro(detalleVentasInsumoId: number): Promise<UpdateResult>;
    FinalizadoVenta(ventaId: number): Promise<any>;
    getInsumoDetallePorVenta(ventaId: number): Promise<VentaDetalleInsumosDTO[]>;
    getInsumosPorDetalleVenta(detalleVentaId: number): Promise<DetalleVentasInsumosEntity[]>;
    updateEstadoDetalleVenta(detalleVentaId: number): Promise<boolean>;
    updateEstadosDetalleVenta(ventaId: number, estado: boolean): Promise<DetalleVentasEntity[]>;
    getById(id: number): Promise<VentaEntity>;
    getByUuid(uuid: string): Promise<VentaEntity>;
    getVentasCreditoCliente(clienteId: number, options: PaginationOptions): Promise<PaginationPrimeNgResult>;
    getDetalleVentaById(ventaId: number): Promise<VentaServiciosDTO>;
    getventaByFolio(folio: string): Promise<InformeFolioDTO>;
    updateStatus(id: number, estatusNuevo: EstadosVentas): Promise<UpdateResult>;
    updateVenta(id: number, nuevaVenta: VentaEntity): Promise<VentaEntity>;
    updateFolioPx(ventaId: any, responsePx: any): Promise<UpdateResult>;
    solicitarCancelacion(ventaId: number, motivoCancelacion: string): Promise<UpdateResult>;
    cancelarVenta(id: number, estatusCancelacion: EstadosCancelacionVenta, user: UsersEntity): Promise<UpdateResult>;
    delete(id: number): Promise<DeleteResult>;
    paginate(cajaId: number, options: PaginationOptions): Promise<PaginationPrimeNgResult>;
    paginateVentasClientes(options: PaginationOptions): Promise<PaginationPrimeNgResult>;
    paginateVentasPaciente(options: PaginationOptions): Promise<PaginationPrimeNgResult>;
    getPagosByVenta(ventaId: number): Promise<PagoEntity[]>;
    updateCredito(id: number, credito: UpdateCreditoDTO): Promise<UpdateResult>;
    getTicketVenta(ventaId: number): Promise<TicketVentaDTO>;
    autorizarDescuento(ventaId: number, data: AutorizarDescuentoDTO): Promise<AutorizarDescuentoResponseDTO>;
    paginateMovil(options: PaginationOptions): Promise<PaginationPrimeNgResult>;
    getPdfUrl(uuid: string): Promise<string>;
    getByFolioAcceso(folio: string, acceso: string): Promise<VentaEntity>;
    paginateSeguimientoVenta(user: LoginIdentityDTO, options: PaginationOptions): Promise<PaginationPrimeNgResult>;
    getMaquiladoresVendedoresCaptadores(): Promise<{
        maquiladores: Partial<UsersEntity>[];
        vendedores: Partial<UsersEntity>[];
        captadores: Partial<UsersEntity>[];
    }>;
}
