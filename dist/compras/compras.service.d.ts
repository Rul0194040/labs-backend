import { DetalleCompraDTO } from './DTO/detalle-compra.dto';
import { EstatusCompra } from './EstatusCompra.enum';
import { InformeResultDTO } from './DTO/informe-result.dto';
import { HttpStatus } from '@nestjs/common';
import { PaginationPrimeNgResult } from '@sanfrancisco/common/DTO/pagination-prime-Ng-result.dto';
import { PaginationOptions } from '@sanfrancisco/common/DTO/paginationPrimeNg.dto';
import { UpdateResult, DeleteResult } from 'typeorm';
import { InformeCompraDTO } from './DTO/informe-compra.dto';
import { DetalleCompraEntity } from './detallesCompras.entity';
import { GenerarOrdenDTO } from './DTO/generar-orden.dto';
import { GetCompraDTO } from './DTO/get-compra.dto';
import { AgregarInsumoDTO } from './DTO/agregarInsumoDetalle.dto';
import { AltaByCompraDTO } from './DTO/altaBycompra.dto';
import { ConfigService } from '@nestjs/config';
import { HeimdalService } from '@sanfrancisco/common/heimdal/heimdal.service';
import { MailService } from '@sanfrancisco/common/services/mailer/email.service';
import { AlmacenService } from '../almacen/almacen.service';
import { LoginIdentityDTO } from '../auth/dto/loginIdentity.dto';
export declare class ComprasService {
    private readonly configService;
    private readonly mailSenderService;
    private readonly heimalService;
    private readonly almacenService;
    constructor(configService: ConfigService, mailSenderService: MailService, heimalService: HeimdalService, almacenService: AlmacenService);
    private readonly notFoundMessage;
    create(informe: InformeCompraDTO): Promise<InformeResultDTO>;
    generarOrden(orden: GenerarOrdenDTO): Promise<HttpStatus>;
    getById(id: number): Promise<GetCompraDTO>;
    importarCotizacion(id: number, numCotizacion: number, path: string): Promise<UpdateResult>;
    descargarCotizacion(id: number): Promise<string>;
    createDetalleCompra(id: number, detalle: AgregarInsumoDTO): Promise<DetalleCompraEntity[]>;
    UpdateCompraClave(id: number, clave: boolean): Promise<UpdateResult>;
    UpdateDetalleCompra(detalleId: number, detalle: DetalleCompraDTO): Promise<DetalleCompraEntity>;
    altaBycompra(compraId: number, data: AltaByCompraDTO, usuario: LoginIdentityDTO): Promise<InformeResultDTO>;
    sendToProveedor(id: number): Promise<HttpStatus>;
    updateStatus(id: number, active: boolean): Promise<UpdateResult>;
    changeStatus(id: number, estatus: EstatusCompra): Promise<UpdateResult>;
    delete(id: number): Promise<DeleteResult>;
    deleteDetalleCompras(id: number): Promise<DeleteResult>;
    paginate(options: PaginationOptions): Promise<PaginationPrimeNgResult>;
}
